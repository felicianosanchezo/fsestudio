@page "/panel-contabilidad"

@inject AuthenticationProviderJWT AuthProvider
@inject NavigationManager navigationManager



<div class="dashboard-imagen">
    <img src="/Images/Portada_Gastos.png" class="img-fluid" />
    <div class="menu-text">PANEL</div>
</div>

@* 
FECHAS *@

<div class="dashboard-main">
    <div class="container-fluid no-padding">
    <div class="row">
        <div class="col-md-3 col-sm-6  d-flex align-items-center">
            <button class="btn btn-primary w-100" @onclick="Buscar">Buscar</button>
        </div>
        <div class="col-md-3 col-sm-6  d-flex align-items-center">
            <label for="fechaInicio" class="me-2">Fecha Inicio:</label>
            <InputDate @bind-Value="fechaInicio" id="fechaInicio" class="form-control" />
        </div>
        <div class="col-md-3 col-sm-6 d-flex align-items-center">
            <label for="fechaFin" class="me-2">Fecha Fin:</label>
            <InputDate @bind-Value="fechaFin" id="fechaFin" class="form-control" />
        </div>
        <div class="col-md-3 col-sm-6  d-flex align-items-center">
            <button class="btn btn-secondary w-100" @onclick="HastaHoy">Hasta Hoy</button>
        </div>
    </div>
</div>
</div>

<style>


    .w-100 {
        width: 100%;
    }

    .d-flex {
        display: flex;
    }

    .align-items-center {
        align-items: center;
    }

    .me-2 {
        margin-right: 0.5rem;
    }
</style>

@* TABLAS *@

<div class="dashboard-main">
    <div class="container-fluid no-padding">
        <div class="row gx-2 gy-2">
            <div class="col-lg-3 col-md-6 col-sm-12 custom-bg">
                <div class="inner-box">
                    <h4 class ="center-text">Cuentas</h4>
                    <hr class="custom-hr" />
                    @if (cuentaFechas != null)
                    {
                        <div class="table-responsive">
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Cuenta</th>
                                        <th>Total</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in cuentaFechas)
                                    {
                                        <tr>
                                            <td>@item.Cuenta</td>
                                            <td>@item.Total</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
            <div class="col-lg-3 col-md-6 col-sm-12 custom-bg ">
                <div class="inner-box">
                    <h4 class ="center-text">Cartera</h4>
                    <hr class="custom-hr" />
                    @if (carteraFechas != null)
                    {
                        <div class="table-responsive">
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Cartera</th>
                                        <th>Total</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in carteraFechas)
                                    {
                                        <tr>
                                            <td>@item.Cartera</td>
                                            <td>@item.Total</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
            <div class="col-lg-3 col-md-6 col-sm-12 custom-bg ">
                <div class="inner-box">
                    <h4 class ="center-text">Resumen Financiero</h4>
                    <hr class="custom-hr" />
                <div class="panel-resumen">
                    <h5>Fortuna Neta: <span class="valor-negativo">-31,718.48</span></h5>
                    <p>Ingreso Total: 818.49 P/D: 1.00675276</p>
                    <p>Egreso Total: -1136.44 P/D: -1.39783517</p>
                    <p>Dias: 813</p>
                    <p>Sistema Efectivo: 78.37</p>
                    <p>Fisico Efectivo: 0.00</p>
                    <p>Diferencia: 0.00</p>
                    <p>Sistema Banco: 2552.35</p>
                    <p>Fisico Banco: <input type="text" value="0.00" /></p>
                    <p>Diferencia: 0.00</p>
                </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6 col-sm-12 custom-bg">
                <div class="inner-box">
                    <h4 class ="center-text">Cuadrar Contabilidad</h4>
                <hr class="custom-hr" />
                <div class="row">
                    <div class="col-6">
                        <h5>Billetes:</h5>
                        @foreach (var billete in billetes)
                        {
                            <div class="input-group mb-2">
                                <InputText @bind-Value="billete.Cantidad" class="form-control" />
                                <div class="input-group-append">
                                    <span class="input-group-text">@billete.Valor.ToString("C")</span>
                                </div>
                            </div>
                        }
                    </div>
                    <div class="col-6">
                        <h5>Monedas:</h5>
                        @foreach (var moneda in monedas)
                        {
                            <div class="input-group mb-2">
                                <InputText @bind-Value="moneda.Cantidad" class="form-control" />
                                <div class="input-group-append">
                                    <span class="input-group-text">@moneda.Valor.ToString("C")</span>
                                </div>
                            </div>
                        }
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-6">
                        <button class="btn btn-secondary w-100" @onclick="Limpiar">Limpiar</button>
                    </div>
                    <div class="col-6">
                        <button class="btn btn-primary w-100" @onclick="Calcular">Calcular</button>
                    </div>
                </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>


    .custom-bg {
        background-color: transparent;
     
        display: flex;
        flex-direction: column;
    }

    .no-padding {
        padding: 0 !important;
        margin: 0 !important;
    }

    .inner-box {
        background-color: #E0E0DC;
        margin: 3px;

        border-radius: 8px;
        padding: 15px;
        flex-grow: 1;
        overflow: auto;
    }
    .custom-hr {
        border-top: 1px solid #4D4D4D;
    }

    .input-group-text {
        font-size: 0.8rem;
    }

    .input-group .form-control {
        font-size: 0.8rem;
        width: 40px; /* Ajustar el tamaño del input */
    }

    .input-group .input-group-append {
        margin-left: 10px; /* Espacio entre cantidad y valor */
    }

        .input-group .input-group-append .input-group-text {
            width: 80px; /* Ajustar el tamaño del texto */
            display: flex;
            justify-content: center;
            align-items: center;
        }

    button.btn {
        font-size: 0.8rem;
    }

    .center-text {
        text-align: center; /* Clase específica para centrar el texto */
    }



    .panel-resumen {
        font-size: 0.9rem;
        line-height: 1.2; /* Ajustar la altura de línea para reducir el espacio entre líneas */
    }

        .panel-resumen h5 {
            margin-bottom: 15px; /* Reducir el margen inferior de los encabezados */
        }


        .panel-resumen p {
            margin-bottom: 15px; /* Reducir el margen inferior de los párrafos */
        }

        .panel-resumen input[type="text"] {
            font-size: 0.9rem;
            width: 100px; /* Ajustar el ancho del input si es necesario */
        }








</style>

@* REGISTOS *@

<div class ="dashboard-main">
<h4>Registros Diarios</h4>

@if (fechas != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Tipo</th>
                <th>Fecha</th>
                <th>Hora</th>
                <th>Total</th>
                <th>Cartera</th>
                <th>Cuenta</th>
                <th>Categoria</th>
                <th>Concepto</th>
                <th>Porcentaje</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in fechas)
            {
                <tr>
                    <td>@item.Tipo</td>
                    <td>@item.Fecha.ToShortDateString()</td>
                    <td>@item.Hora</td>
                    <td>@item.Total</td>
                    <td>@item.Cartera</td>
                    <td>@item.Cuenta</td>
                    <td>@item.Categoria</td>
                    <td>@item.Concepto</td>
                    <td>@item.Porcentaje</td>
                </tr>
            }
        </tbody>
    </table>
}
</div>

<div class="dashboard-main">
    <div class="dashboard-main">
        @* <IncomeExpenseChart FechaInicio="fechaInicio" FechaFin="fechaFin" IdUsuario="AuthProvider.GetIdUsuario()"/> *@
    </div>
</div>

@code {

    private DateTime fechaInicio = DateTime.Today;
    private DateTime fechaFin = DateTime.Today;
    private int idUsuario = 1;
    private List<PanelCuentaDTO> cuentaFechas;
    private List<PanelCarteraDTO> carteraFechas;
    private List<PanelFechaDTO> fechas;
    private FechasExtremosDTO fechasExtremos;
    // Datos para el formulario de Billetes y Monedas
    private List<Dinero> billetes = new List<Dinero>
    {
        new Dinero { Valor = 1000 },
        new Dinero { Valor = 500 },
        new Dinero { Valor = 200 },
        new Dinero { Valor = 100 },
        new Dinero { Valor = 50 },
        new Dinero { Valor = 20 },
        new Dinero { Valor = 10 }
    };
    private List<Dinero> monedas = new List<Dinero>
    {
        new Dinero { Valor = 5 },
        new Dinero { Valor = 2 },
        new Dinero { Valor = 1 },
        new Dinero { Valor = 0.50m },
        new Dinero { Valor = 0.10m },
        new Dinero { Valor = 1 }, // Aquí parece que repetiste el valor 1 para monedas, lo he dejado por consistencia
        new Dinero { Valor = 1 }
    };
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            idUsuario = AuthProvider.GetIdUsuario(); // Asignar el idUsuario directamente desde los claims
            await HastaHoy();

        }
        else
        {
            // Manejo de caso cuando el usuario no está autenticado, por ejemplo, redirigir a la página de inicio de sesión
            navigationManager.NavigateTo("/login");
        }




    }
    private async Task HastaHoy()
    {


        // fechasExtremos = await PanelRepositorio.ObtenerFechasExtremos();
        // if (fechasExtremos != null)
        // {
        //     fechaInicio = fechasExtremos.FechaInicio;
        //     fechaFin = fechasExtremos.FechaFin;
        // }
        // cuentaFechas = await PanelRepositorio.ObtenerCuentaFechas(fechaInicio, fechaFin, idUsuario);
        // carteraFechas = await PanelRepositorio.ObtenerCarteraFechas(fechaInicio, fechaFin, idUsuario);
        // fechas = await PanelRepositorio.ObtenerFechas(fechaInicio, fechaFin, idUsuario);

    }
    private async Task Buscar()
    {
        // cuentaFechas = await PanelRepositorio.ObtenerCuentaFechas(fechaInicio, fechaFin, idUsuario);
        // carteraFechas = await PanelRepositorio.ObtenerCarteraFechas(fechaInicio, fechaFin, idUsuario);
        // fechas = await PanelRepositorio.ObtenerFechas(fechaInicio, fechaFin, idUsuario);

    }
    private void Limpiar()
    {
        foreach (var billete in billetes)
        {
            billete.Cantidad = string.Empty;
        }
        foreach (var moneda in monedas)
        {
            moneda.Cantidad = string.Empty;
        }
    }
    private void Calcular()
    {
        // Lógica de cálculo aquí
    }
    public class Dinero
    {
        public decimal Valor { get; set; }
        public string Cantidad { get; set; }
    }










}
