@page "/gasto-actualizar/{id:int}"
@inject SweetAlertService sweetAlertService
@inject IRepositorio repositorio
@inject NavigationManager navigationManager
@inject AuthenticationProviderJWT AuthProvider

<GastoFormulario @ref="gastoForm" gasto="gasto" OnValidSubmit="Actualizar" Cancelar="Cancelar"> </GastoFormulario>

@code {
    [Parameter]
    public int Id { get; set; }

    private GastoDTO gasto = new GastoDTO();
    private GastoFormulario? gastoForm;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            gasto.IdUsuario = AuthProvider.GetIdUsuario(); // Asignar el idUsuario directamente desde los claims
            await CargarGasto();
        }
        else
        {
            // Manejo de caso cuando el usuario no está autenticado, por ejemplo, redirigir a la página de inicio de sesión
            navigationManager.NavigateTo("/login");
        }
    }

    private async Task CargarGasto()
    {
        var httpResponse = await repositorio.Get<GastoDTO>($"/api/gasto/listarid/{Id}");

        if (httpResponse.Error)
        {
            var message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        gasto = httpResponse.Response!;
    }

    private async Task Actualizar()
    {
        if (gasto.IdCuenta == 0 || gasto.IdCategoria == 0 || gasto.IdCartera == 0)
        {
            await sweetAlertService.FireAsync("Error", "Debe seleccionar una Cuenta, Categoría y Cartera válidas.", SweetAlertIcon.Error);
            return;
        }

        gasto.IdGasto = Id; // Asignar el idUsuario directamente desde los claims
        var httpResponse = await repositorio.Put($"/api/gasto/actualizar", gasto);

        if (httpResponse.Error)
        {
            var message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.TopStart,
                ShowConfirmButton = false,
                Timer = 1000
            });

        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Gasto Actualizado.");

        Navegar();
    }

    private void Navegar()
    {
        navigationManager.NavigateTo("/gasto-listar");
    }


    private void Cancelar()
    {
        //gastoForm!.formularioPostOk = true;
        navigationManager.NavigateTo("/gasto-listar");
    }

}
