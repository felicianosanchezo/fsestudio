@page "/registro-gastos"
@using System.ComponentModel.DataAnnotations
@inject IRepositorio repositorio
@inject AuthenticationProviderJWT AuthProvider


<div class="dashboard-imagen">
    <img src="/Images/Portada_Gastos.png" class="img-fluid" />
    <div class="menu-text">REGISTRO DE GASTOS</div>
</div>

<div class="dashboard-main">


    <EditForm EditContext="contextoEdicion" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" />


        <div class="mb-2">
            <label for="Fecha" class="form-label">Fecha:</label>
            <InputDate @bind-Value="gasto.Fecha" class="form-control" />
            <ValidationMessage For="@(() => gasto.Fecha)" class="text-danger" />
        </div>

        <div class="mb-2">
            <label for="Total" class="form-label">Total:</label>
            <InputNumber @bind-Value="gasto.Total" class="form-control" />
            <ValidationMessage For="@(() => gasto.Total)" class="text-danger" />
        </div>

        <div class="mb-2">
            <label for="IdCartera" class="form-label">Cartera:</label>
            <InputSelect @bind-Value="gasto.IdCartera" class="form-control">
                <option value="" selected>Seleccione Cartera</option>
                @foreach (var cartera in carteras)
                {
                    <option value="@cartera.IdCartera">@cartera.Nombre</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => gasto.IdCartera)" class="text-danger" />
        </div>

        <div class="mb-2">
            <label for="IdCuenta" class="form-label">Cuenta:</label>
            <InputSelect @bind-Value="gasto.IdCuenta" class="form-control">
                <option value="" selected>Seleccione Cuenta</option>
                @foreach (var cuenta in cuentas)
                {
                    <option value="@cuenta.IdCuenta">@cuenta.Nombre</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => gasto.IdCuenta)" class="text-danger" />
        </div>

        <div class="mb-2">
            <label for="IdCategoria" class="form-label">Categoría:</label>
            <InputSelect @bind-Value="gasto.IdCategoria" class="form-control">
                <option value="" selected>Seleccione Categoría</option>
                @foreach (var categoria in categorias)
                {
                    <option value="@categoria.IdCategoria">@categoria.Nombre</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => gasto.IdCategoria)" class="text-danger" />
        </div>

        <div class="mb-2">
            <label for="Concepto" class="form-label">Concepto:</label>
            <InputText @bind-Value="gasto.Concepto" class="form-control" />
            <ValidationMessage For="@(() => gasto.Concepto)" class="text-danger" />
        </div>
       
        <button type="submit" class="btn btn-primary">Guardar</button>
        <button class="btn btn-danger" @onclick="Cancelar">Cancelar</button>
    </EditForm>
    <br/>
    <br/>
    <br/>
    <br />
    <br />
    <br />
    <br /> 
    <br />
    
</div>


@code {
    [Parameter] public GastoDTO gasto { get; set; } = new GastoDTO();
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public EventCallback Cancelar { get; set; }
    public bool formularioPostOk { get; set; }

    private EditContext contextoEdicion = null!;
    private List<CarteraDTO> carteras = new List<CarteraDTO>();
    private List<CuentaDTO> cuentas = new List<CuentaDTO>();
    private List<CategoriaDTO> categorias = new List<CategoriaDTO>();

    public int IdUsuario { get; set; }
    private ElementReference totalInput;

    protected override async Task OnInitializedAsync()
    {
        contextoEdicion = new(gasto);

        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            try
            {
                IdUsuario = AuthProvider.GetIdUsuario(); // Asignar el idUsuario directamente desde los claims
                await CargarDatosIniciales(IdUsuario);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al obtener IdUsuario: {ex.Message}");
                // Manejo del error, por ejemplo, redirigir a la página de inicio de sesión
            }
        }
        else
        {
            // Manejo de caso cuando el usuario no está autenticado
            // Por ejemplo, redirigir a la página de inicio de sesión
        }
    }







    private async Task HandleValidSubmit()
    {
        await OnValidSubmit.InvokeAsync();
    }

    private async Task CargarDatosIniciales(int idUsuario)
    {
        await CargarCarteras(idUsuario);
        await CargarCuentas(idUsuario);
        await CargarCategorias(idUsuario);
    }

    private async Task CargarCarteras(int idUsuario)
    {
        try
        {
            var response = await repositorio.Get<List<CarteraDTO>>($"api/cartera/listar/{idUsuario}");
            if (response != null && response.Response != null)
            {
                carteras = response.Response;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar carteras: {ex.Message}");
        }
    }

    private async Task CargarCuentas(int idUsuario)
    {
        try
        {
            var response = await repositorio.Get<List<CuentaDTO>>($"api/cuenta/listar/{idUsuario}");
            if (response != null && response.Response != null)
            {
                cuentas = response.Response;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar cuentas: {ex.Message}");
        }
    }

    private async Task CargarCategorias(int idUsuario)
    {
        try
        {
            var response = await repositorio.Get<List<CategoriaDTO>>($"api/categoria/listar/{idUsuario}");
            if (response != null && response.Response != null)
            {
                categorias = response.Response;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar categorías: {ex.Message}");
        }
    }
}