@inject IJSRuntime JS
@inject IRepositorio repositorio
@inject NavigationManager Navigation
 @inject HttpClient Http



<div class="carousel-container-fondo">

    <div class="title-container">
        <div class="contenedor-titulo">
            <h1 class="Titulo-Principal-2">Soluciones Web Profesionales</h1>
        </div>

        <div class="text-content">
            <p class="Descripcion-Principal-Home">
                En <span class="highlight">FS ESTUDIO</span>, combinamos <span class="highlight">experiencia arquitectónica</span> con herramientas digitales para ofrecer <span class="highlight">soluciones web personalizadas</span> dirigidas a <span class="highlight">profesionales de la construcción</span>, despachos técnicos y constructoras.
                Creamos sitios optimizados para mostrar proyectos, atraer clientes y digitalizar procesos como presupuestos, portafolios o control de obra.
                Nuestro enfoque une <span class="highlight">diseño funcional</span>, <span class="highlight">tecnología</span> y <span class="highlight">comunicación profesional</span> para ayudarte a proyectar tu trabajo con claridad, orden y resultados.
            </p>
            <div>
                <a href="/soluciones-web" class="btn-ver-mas">Ver nuestras Soluciones</a>
            </div>
        </div>
    </div>


    <div class="carousel-container">
        <div class="carousel-inner1">
            @if (SelectedImage != null)
            {
                <div class="carousel-item1 active">
                    <img src="Images/Soluciones Web/SOLUCIONES WEB 1.jpg" loading="lazy" class="d-block w-100" alt="@SelectedImage.Nombre" />
                </div>
            }
        </div>
    </div>
    <div class="carousel-text-below-outside">


        <div class="contenedor-titulo-2">
            <h4 class="Titulo-Proyecto">Desarrollo Web Profesional</h4>
        </div>

        <div class="contenedor-descripcion-2">
            <p class="Descripcion-Principal-Proyecto">
                Te ayudamos a estar 100% en línea con una página web pensada para mostrar tu portafolio, recibir consultas, atraer nuevos clientes y automatizar procesos clave de tu estudio o constructora. Nuestras soluciones están enfocadas en profesionales del sector que buscan modernizar su presencia con una web clara, funcional y hecha a medida. Explorá nuestras opciones web y digitalizá tu trabajo con FS Estudio.
            </p>
        </div>

        <div class="contenedor-boton-2">

           
            <button class="btn-azul1 custom-button" @onclick="() => NavegarADetalle(SelectedImage.IdServicio)">
                Ver Soluciones Web
            </button>

        </div>

        <div class="contenedor-botones">
            <!-- Botón: Enviar correo para solicitar información -->
            <button class="boton-accion-portada" title="Solicitar Información" @onclick="EnviarCorreoInformacion">
                <i class="bi bi-envelope-at"></i> <span class="boton-texto">Más Información</span>
            </button>

            <button class="boton-accion-portada" title="Enviar WhatsApp" @onclick="EnviarWhatsApp">
                <i class="bi bi-whatsapp"></i> <span class="boton-texto">Enviar WhatsApp</span>
            </button>

            <button class="boton-accion-portada" title="Compartir Proyecto" @onclick="CompartirPorWhatsApp">
                <i class="bi bi-share-fill"></i> <span class="boton-texto">Compartir Proyecto</span>
            </button>



        </div>









    </div>
</div>

@code {
    public List<ServicioListadoDTO>? Servicios = new List<ServicioListadoDTO>();

    // Imagen seleccionada que se muestra fuera del carrusel
    public ServicioListadoDTO SelectedImage = new ServicioListadoDTO();
    private FsEstudioDTO empresa;

    protected override async Task OnInitializedAsync()
    {



        await Cargar();
        InicializarPrimeraImagen();
        // Inicializa el interop de JavaScript para manejar el cambio de slide
        InvokeAsync(() => JS.InvokeVoidAsync("carouselInterop.initCarousel", "carouselServicios", DotNetObjectReference.Create(this)));


        empresa = FsEstudioService.ObtenerInformacionEmpresa().FirstOrDefault();

    }


    private async Task EnviarCorreoInformacion()
    {
        var email = empresa.Correo;
        var subject = "Interés en soluciones web para mi estudio o constructora";
        var body = "Hola, estoy interesado en conocer más sobre sus planes de desarrollo web. Me gustaría tener presencia en línea para mostrar mi portafolio y automatizar procesos de mi estudio o empresa constructora.";
        var mailtoUrl = $"mailto:{email}?subject={Uri.EscapeDataString(subject)}&body={Uri.EscapeDataString(body)}";

        await JS.InvokeVoidAsync("abrirEnNuevaPestana", mailtoUrl);
    }

    private async Task CompartirPorWhatsApp()
    {
       var mensaje = "Te comparto las soluciones web de FS Estudio: https://www.fsestudio.com/soluciones-web";

        var whatsappUrl = $"https://wa.me/?text={Uri.EscapeDataString(mensaje)}";

        await JS.InvokeVoidAsync("abrirEnNuevaPestana", whatsappUrl);
    }

    private async Task EnviarWhatsApp()
    {
        var mensaje = "Hola, vi sus soluciones web en la página de FS Estudio y me interesa tener una página profesional para mi estudio o empresa constructora. ¿Me podrían brindar más información?";
        var whatsappUrl = $"https://wa.me/{empresa.WhatsAppTelefono}?text={Uri.EscapeDataString(mensaje)}";

        await JS.InvokeVoidAsync("abrirEnNuevaPestana", whatsappUrl);
    }



    private int wordLimit = 30; // Límite de palabras, puedes ajustar este valor
    private void NavegarADetalle(int idServicio) { Navigation.NavigateTo($"/soluciones-web"); }
    // Propiedad calculada para obtener la descripción truncada
    private string DescripcionTruncada
    {
        get
        {
            if (string.IsNullOrWhiteSpace(SelectedImage?.Descripcion))
                return string.Empty;

            var palabras = SelectedImage.Descripcion.Split(' '); // Dividir el texto en palabras
            if (palabras.Length <= wordLimit)
                return SelectedImage.Descripcion; // Retorna la descripción completa si está dentro del límite

            // Toma las primeras palabras hasta el límite y agrega "..."
            return string.Join(" ", palabras.Take(wordLimit)) + "...";
        }
    }

    private void InicializarPrimeraImagen()
    {
        // Inicializa la primera imagen al cargar la página
        if (Servicios != null && Servicios.Count > 0)
        {
            SelectedImage = Servicios.First();
            StateHasChanged(); // Notifica a Blazor que el estado ha cambiado
        }
    }


    private async Task Cargar()
    {
        int intentos = 0;
        const int maxIntentos = 3; // Número máximo de intentos
        const int delayMilisegundos = 2000; // Tiempo de espera entre intentos (en milisegundos)

        while (intentos < maxIntentos)
        {
            try
            {

                var response = await repositorio.Get<List<ServicioListadoDTO>>("/api/servicio/home-carrucel");
                if (response != null && response.Response != null)
                {
                    Servicios = response.Response;
                    return; // Salir del método si la carga fue exitosa
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error en intento {intentos + 1}: {ex.Message}");
                // Opcional: puedes registrar o manejar el error de cada intento aquí
            }

            intentos++;
            if (intentos < maxIntentos)
            {
                await Task.Delay(delayMilisegundos); // Espera antes de intentar nuevamente
            }
        }

        Console.WriteLine("Error: No se pudo conectar con el servidor después de varios intentos.");
        // Opcional: aquí puedes mostrar un mensaje de error al usuario si es necesario
    }
















    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            JS.InvokeVoidAsync("carouselInterop.initCarousel", "carouselServicios", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public void OnCarouselSlideChange(int slideIndex)
    {
        if (slideIndex >= 0 && slideIndex < Servicios.Count)
        {
            SelectedImage = Servicios[slideIndex];
            StateHasChanged(); // Notifica a Blazor que el estado ha cambiado
        }
    }
}
