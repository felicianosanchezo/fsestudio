@inject IJSRuntime JS
@inject IRepositorio repositorio
@inject NavigationManager Navigation
 @inject HttpClient Http



<div class="carousel-container-fondo">
    <Titulo1 />

    <div class="carousel-container">
        <div id="carouselExampleIndicators" class="carousel slide" data-bs-ride="carousel" data-bs-interval="3000">
            <div class="carousel-indicators">
                @for (int i = 0; i < Servicios.Count; i++)
                {
                    <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="@i" class="@(i == 0 ? "active" : "")" aria-current="@(i == 0 ? "true" : "false")" aria-label="Slide @(i + 1)"></button>
                }
            </div>

            <div class="carousel-inner">
                @for (int i = 0; i < Servicios.Count; i++)
                {
                    <div class="carousel-item @(i == 0 ? "active" : "")">
                        <img src="@Servicios[i].PortadaUrl" loading="lazy"  class="d-block w-100" alt="Image @(i + 1)" />
                    </div>
                }
            </div>

            <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="prev">
                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                <span class="visually-hidden">Previous</span>
            </button>
            <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="next">
                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                <span class="visually-hidden">Next</span>
            </button>
        </div>
    </div>

    <div class="carousel-text-below-outside">
        <h1 class="Titulo-Especificaciones-oscura">@SelectedImage?.Nombre</h1> <!-- Mostrando el título de la imagen seleccionada -->
        <p class="Descripcion-Principal">@DescripcionTruncada</p>


        <button class="btn-azul1 custom-button" @onclick="() => NavegarADetalle(SelectedImage.IdServicio)">
            Ir a Servicio
        </button>
        
    











    </div>
</div>

@code {
    public List<ServicioListadoDTO>? Servicios = new List<ServicioListadoDTO>();

    // Imagen seleccionada que se muestra fuera del carrusel
    public ServicioListadoDTO SelectedImage = new ServicioListadoDTO();

    protected override async Task OnInitializedAsync()
    {



        await Cargar();
        InicializarPrimeraImagen();
        // Inicializa el interop de JavaScript para manejar el cambio de slide
        InvokeAsync(() => JS.InvokeVoidAsync("carouselInterop.initCarousel", "carouselExampleIndicators", DotNetObjectReference.Create(this)));
    }


  






    private int wordLimit = 40; // Límite de palabras, puedes ajustar este valor
    private void NavegarADetalle(int idServicio) { Navigation.NavigateTo($"/portafolio/{idServicio}"); }
    // Propiedad calculada para obtener la descripción truncada
    private string DescripcionTruncada
    {
        get
        {
            if (string.IsNullOrWhiteSpace(SelectedImage?.Descripcion))
                return string.Empty;

            var palabras = SelectedImage.Descripcion.Split(' '); // Dividir el texto en palabras
            if (palabras.Length <= wordLimit)
                return SelectedImage.Descripcion; // Retorna la descripción completa si está dentro del límite

            // Toma las primeras palabras hasta el límite y agrega "..."
            return string.Join(" ", palabras.Take(wordLimit)) + "...";
        }
    }

    private void InicializarPrimeraImagen()
    {
        // Inicializa la primera imagen al cargar la página
        if (Servicios != null && Servicios.Count > 0)
        {
            SelectedImage = Servicios.First();
            StateHasChanged(); // Notifica a Blazor que el estado ha cambiado
        }
    }


    private async Task Cargar()
    {
        int intentos = 0;
        const int maxIntentos = 3; // Número máximo de intentos
        const int delayMilisegundos = 2000; // Tiempo de espera entre intentos (en milisegundos)

        while (intentos < maxIntentos)
        {
            try
            {
                var response = await repositorio.Get<List<ServicioListadoDTO>>("/api/servicio/home-carrucel");
                if (response != null && response.Response != null)
                {
                    Servicios = response.Response;
                    return; // Salir del método si la carga fue exitosa
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error en intento {intentos + 1}: {ex.Message}");
                // Opcional: puedes registrar o manejar el error de cada intento aquí
            }

            intentos++;
            if (intentos < maxIntentos)
            {
                await Task.Delay(delayMilisegundos); // Espera antes de intentar nuevamente
            }
        }

        Console.WriteLine("Error: No se pudo conectar con el servidor después de varios intentos.");
        // Opcional: aquí puedes mostrar un mensaje de error al usuario si es necesario
    }
















    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            JS.InvokeVoidAsync("carouselInterop.initCarousel", "carouselExampleIndicators", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public void OnCarouselSlideChange(int slideIndex)
    {
        if (slideIndex >= 0 && slideIndex < Servicios.Count)
        {
            SelectedImage = Servicios[slideIndex];
            StateHasChanged(); // Notifica a Blazor que el estado ha cambiado
        }
    }
}
