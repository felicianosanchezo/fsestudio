@inject SweetAlertService sweetAlertService

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" />





<div class="usuario-container-fondo">

    <TituloConDescripcion Title="Registro de Servicios"
                          Description="Este es el formulario para registrar un nuevo servicio. Por favor, complete todos los campos requeridos." />

 


    <div class="dashboard-main">


        <EditForm EditContext="contextoEdicion" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="nombre" class="form-label">Nombre</label>
                <InputText id="nombre" class="form-control" @bind-Value="usuario.Nombre" />
                <ValidationMessage For="@(() => usuario.Nombre)" />
            </div>

            <div class="mb-3">
                <label for="apellidos" class="form-label">Apellidos</label>
                <InputText id="apellidos" class="form-control" @bind-Value="usuario.Apellidos" />
                <ValidationMessage For="@(() => usuario.Apellidos)" />
            </div>

            <div class="mb-3">
                <label for="tipoUsuario" class="form-label">Rol</label>
                <InputSelect id="tipoUsuario" class="form-control" @bind-Value="usuario.tipoUsuario">
                    @foreach (var rol in roles)
                    {
                        <option value="@rol.Nombre">@rol.Nombre</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => usuario.tipoUsuario)" />
            </div>

            <div class="mb-3">
                <label for="telefono" class="form-label">Teléfono</label>
                <InputText id="telefono" class="form-control" @bind-Value="usuario.Telefono" />
                <ValidationMessage For="@(() => usuario.Telefono)" />
            </div>

            <div class="mb-3">
                <label for="email" class="form-label">Email</label>
                <InputText id="email" class="form-control" @bind-Value="usuario.Email" />
                <ValidationMessage For="@(() => usuario.Email)" />
            </div>

            <div class="mb-3">
                <label for="usuario" class="form-label">Usuario</label>
                <InputText id="usuario" class="form-control" @bind-Value="usuario.Usuario" />
                <ValidationMessage For="@(() => usuario.Usuario)" />
            </div>

            <div class="mb-3">
                <label for="password" class="form-label">Contraseña</label>
                <InputText id="password" class="form-control" @bind-Value="usuario.Password" />
                <ValidationMessage For="@(() => usuario.Password)" />
            </div>

            <div class="form-check">
                <input class="form-check-input" type="checkbox" id="Estado" @bind="usuario.Estado" />
                <label class="form-check-label" for="Estado">Estado</label>
            </div>



            <br />
            <br />
            <div class="button-container">
                <button type="submit" class="custom-save-btn">
                    <i class="bi bi-save"></i> Guardar
                </button>
                <button class="custom-cancel-btn" @onclick="Cancelar">
                    <i class="bi bi-x-circle"></i> Cancelar
                </button>
            </div>

        </EditForm>
        <br />
        <br />
        <br />
        <br />
        <br />
        <br />
        <br />
        <br />

    </div>

</div>







@code {
    private EditContext contextoEdicion = null!;

    [Parameter]
    [EditorRequired]
    public UsuarioDTO usuario { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    [EditorRequired]
    public EventCallback Cancelar { get; set; }

    public bool formularioPostOk { get; set; }

        private List<RolDTO> roles = new List<RolDTO>();
    protected override void OnInitialized()
    {
        contextoEdicion = new(usuario);
        roles = RolService.ObtenerRoles();
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext contexto)
    {
        var formularioModificado = contextoEdicion.IsModified();
        if (!formularioModificado || formularioPostOk)
            return;

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página? Perderás los cambios.",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Sí"
            });

        var confirm = !string.IsNullOrEmpty(result.Value);
        if (confirm)
            return;

        contexto.PreventNavigation();
    }
}
