@page "/servicios"
@inject IRepositorio repositorio
@inject NavigationManager Navigation

<div class="full-background">
    <div class="top-products-wrapper">
        <div class="titulo-con-descripcion">
            <p class="Titulo-Principal-Secundario">@Titulo</p>
            <hr />
            <p class="Descripcion-Principal">
                Descubre nuestra gama completa de <span class="highlight">servicios en arquitectura y diseño</span>. Desde <span class="highlight">modelado 3D</span> hasta <span class="highlight">ambientación de espacios</span>, ofrecemos soluciones que realzan cada detalle de tus proyectos. Te invitamos a explorar cada servicio y encontrar el <span class="highlight">apoyo ideal</span> para visualizar y planificar tus ideas de forma <span class="highlight">profesional y personalizada</span>.
            </p>

            <hr />
        </div>

        <div class="top-products-container">
            @foreach (var servicio in Servicios)
            {
                <div class="product-item1">
                   

                    <div>
                        <img src="@servicio.PortadaUrl" alt="@servicio.Nombre" loading="lazy" />

                    </div>
                  
                    
                    <div class="contenedor-informacion" >
                        <h4>@servicio.Nombre</h4>
                        
                        <div class="color-unidad">@servicio.Unidad</div>

                        <div class="color-descripcion">Precio: según cantidad y colaborador.</div>


                        <div class="color-descripcion">Descripción: @TruncarDescripcion(servicio.Descripcion)</div>

                        <div class="text-center">
                            @for (int star = 1; star <= 5; star++)
                            {
                                <i class="bi bi-star-fill @(star <= (servicio.Calificacion) ? "estrella-llena" : "estrella-vacia")"></i>
                            }
                        </div>
                        
                        <div>

                            <button class="btn-azul custom-button" @onclick="() => NavegarADetalle(servicio.IdServicio)">
                                Ver detalles
                            </button>



                        </div>

              



                    </div>
   
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public string Titulo { get; set; } = "Listado de servicios";
    [Parameter] public string Descripcion { get; set; } = "Explora nuestra variedad de servicios de arquitectura y diseño, desde modelado 3D hasta ambientación de espacios. Cada servicio está diseñado para ayudarte a visualizar y planificar tus proyectos de forma profesional y detallada.";


    public List<ServicioListadoDTO>? Servicios = new List<ServicioListadoDTO>();
    private void NavegarADetalle(int idServicio) { Navigation.NavigateTo($"/servicio/{idServicio}"); }

    protected override async Task OnInitializedAsync()
    {
        await Cargar();
    }


    private int wordLimit = 20; // Define el límite de palabras

    // Método para truncar el texto a un número específico de palabras
    private string TruncarDescripcion(string descripcion)
    {
        if (string.IsNullOrWhiteSpace(descripcion))
            return string.Empty;

        var palabras = descripcion.Split(' '); // Divide el texto en palabras
        if (palabras.Length <= wordLimit)
            return descripcion; // Retorna la descripción completa si está dentro del límite

        // Toma las primeras palabras hasta el límite y agrega "..."
        return string.Join(" ", palabras.Take(wordLimit)) + "...";
    }
    private async Task Cargar()
    {
        int intentos = 0;
        const int maxIntentos = 3; // Número máximo de intentos
        const int delayMilisegundos = 2000; // Tiempo de espera entre intentos (en milisegundos)

        while (intentos < maxIntentos)
        {
            try
            {
                var response = await repositorio.Get<List<ServicioListadoDTO>>("/api/servicio/listar-listado");
                if (response != null && response.Response != null)
                {
                    Servicios = response.Response;
                    return; // Salir del método si la carga fue exitosa
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error en intento {intentos + 1}: {ex.Message}");
                // Opcional: puedes registrar o manejar el error de cada intento aquí
            }

            intentos++;
            if (intentos < maxIntentos)
            {
                await Task.Delay(delayMilisegundos); // Espera antes de intentar nuevamente
            }
        }

        Console.WriteLine("Error: No se pudo conectar con el servidor después de varios intentos.");
        // Opcional: aquí puedes mostrar un mensaje de error al usuario si es necesario
    }









}
